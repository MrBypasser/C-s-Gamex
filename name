import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import './styles.css';

const App = () => {
  const [currentPage, setCurrentPage] = useState('home');
  const [grid, setGrid] = useState(createGrid(20));
  const [snake, setSnake] = useState([[10, 10]]);
  const [direction, setDirection] = useState('RIGHT');
  const [food, setFood] = useState(generateFood(20));
  const [score, setScore] = useState(0);

  const handleKeyPress = (e) => {
    const { key } = e;
    if (key === 'ArrowUp' && direction !== 'DOWN') setDirection('UP');
    if (key === 'ArrowDown' && direction !== 'UP') setDirection('DOWN');
    if (key === 'ArrowLeft' && direction !== 'RIGHT') setDirection('LEFT');
    if (key === 'ArrowRight' && direction !== 'LEFT') setDirection('RIGHT');
  };

  useEffect(() => {
    if (currentPage === 'game') {
      const interval = setInterval(moveSnake, 200 - Math.min(score * 5, 150));
      window.addEventListener('keydown', handleKeyPress);
      return () => {
        clearInterval(interval);
        window.removeEventListener('keydown', handleKeyPress);
      };
    }
  }, [snake, direction, currentPage]);

  const moveSnake = () => {
    const newSnake = [...snake];
    const head = [...newSnake[newSnake.length - 1]];
    if (direction === 'UP') head[0]--;
    if (direction === 'DOWN') head[0]++;
    if (direction === 'LEFT') head[1]--;
    if (direction === 'RIGHT') head[1]++;
    newSnake.push(head);

    if (head[0] === food[0] && head[1] === food[1]) {
      setScore(score + 1);
      setFood(generateFood(20));
    } else {
      newSnake.shift();
    }

    if (
      head[0] < 0 ||
      head[1] < 0 ||
      head[0] >= 20 ||
      head[1] >= 20 ||
      newSnake.slice(0, -1).some(([x, y]) => x === head[0] && y === head[1])
    ) {
      alert('Game Over! Your score: ' + score);
      setSnake([[10, 10]]);
      setDirection('RIGHT');
      setScore(0);
      setFood(generateFood(20));
      setCurrentPage('home');
      return;
    }
    setSnake(newSnake);
  };

  const renderGrid = () =>
    grid.map((row, rowIndex) => (
      <div key={rowIndex} className="row">
        {row.map((cell, cellIndex) => (
          <div
            key={cellIndex}
            className={`cell ${
              snake.some(([x, y]) => x === rowIndex && y === cellIndex)
                ? 'snake'
                : food[0] === rowIndex && food[1] === cellIndex
                ? 'food'
                : ''
            }`}
          />
        ))}
      </div>
    ));

  return (
    <div>
      {currentPage === 'home' && (
        <div className="home">
          <h1>Welcome to C's Classic Gamex</h1>
          <button onClick={() => setCurrentPage('game')}>Play Snake</button>
          <p>Use arrow keys to control the snake. Eat food to score points!</p>
        </div>
      )}
      {currentPage === 'game' && (
        <div className="game">
          <h1>Snake Game</h1>
          <p>Score: {score}</p>
          <div className="grid">{renderGrid()}</div>
        </div>
      )}
    </div>
  );
};

const createGrid = (size) => Array.from({ length: size }, () => Array(size).fill(0));

const generateFood = (size) => [
  Math.floor(Math.random() * size),
  Math.floor(Math.random() * size),
];

ReactDOM.render(<App />, document.getElementById('root'));
